# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyDesign15.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import string
from PyQt5 import QtCore, QtGui, QtWidgets
from CellTowerCoverageModel import cell_tower_problem
from controlInput import is_float, is_int
from TransportationProblem import transport_optimization_simple
class Ui_Page1(object):
    def setupUi(self, Page1):
        
        self.index = 0
        Page1.setObjectName("Page1")
        Page1.resize(698, 494)
        self.frame = QtWidgets.QFrame(Page1)
        self.frame.setGeometry(QtCore.QRect(-10, 0, 721, 501))
        self.frame.setStyleSheet("background-color: rgb(245, 245, 220); /* Light gray */\n"
"")
        
        self.frame.setObjectName("frame")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 721, 491))
        self.stackedWidget.setObjectName("stackedWidget")
        self.Page_1 = QtWidgets.QWidget()
        self.Page_1.setStyleSheet("color:black")
        self.Page_1.setObjectName("Page_1")
        self.frame_2 = QtWidgets.QFrame(self.Page_1)
        self.frame_2.setGeometry(QtCore.QRect(0, 0, 811, 601))
        
        self.frame_2.setObjectName("frame_2")
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        self.label_3.setGeometry(QtCore.QRect(210, 120, 361, 51))
        self.label_3.setStyleSheet("color: #2F4F70;   /* Steel Blue (A darker blue) */\n"
"\n"
"font-size: 18px;  /* Font size */\n"
"font-weight: bold;  /* Bold text */\n"
"")
        self.label_3.setObjectName("label_3")
        self.Tours = QtWidgets.QPushButton(self.frame_2)
        self.Tours.setGeometry(QtCore.QRect(200, 190, 311, 71))
        self.Tours.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color: rgb(245, 245, 220);               /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"    padding: 10px 20px;         /* Padding inside the button */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.Tours.setFlat(False)
        self.Tours.setObjectName("Tours")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_6.setGeometry(QtCore.QRect(200, 310, 311, 71))
        self.pushButton_6.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"    padding: 10px 20px;         /* Padding inside the button */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.pushButton_6.setObjectName("pushButton_6")
        self.stackedWidget.addWidget(self.Page_1)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.frame_3 = QtWidgets.QFrame(self.page_2)
        self.frame_3.setGeometry(QtCore.QRect(10, 10, 721, 491))
       
        self.frame_3.setObjectName("frame_3")
        self.textEdit = QtWidgets.QTextEdit(self.frame_3)
        self.textEdit.setGeometry(QtCore.QRect(160, 70, 131, 31))
        self.textEdit.setStyleSheet("background-color:white;")
        self.textEdit.setObjectName("textEdit")
        self.label_5 = QtWidgets.QLabel(self.frame_3)
        self.label_5.setGeometry(QtCore.QRect(340, 50, 131, 18))
        self.label_5.setStyleSheet("color: #1E3A8A;  /* A bold, deep blue (Tailwind\'s blue-900) */\n"
"\n"
"font-size: 16px;\n"
"")
        self.label_5.setObjectName("label_5")
        self.textEdit_2 = QtWidgets.QTextEdit(self.frame_3)
        self.textEdit_2.setGeometry(QtCore.QRect(340, 70, 131, 31))
        self.textEdit_2.setStyleSheet("background-color:white;")
        self.textEdit_2.setObjectName("textEdit_2")
        self.Ajouter = QtWidgets.QPushButton(self.frame_3)
        self.Ajouter.setGeometry(QtCore.QRect(530, 70, 81, 31))
        self.Ajouter.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.Ajouter.setObjectName("Ajouter")
        self.label_6 = QtWidgets.QLabel(self.frame_3)
        self.label_6.setGeometry(QtCore.QRect(160, 50, 131, 18))
        self.label_6.setStyleSheet("color: #1E3A8A;  /* A bold, deep blue (Tailwind\'s blue-900) */\n"
"\n"
"font-size: 16px;\n"
"")
        self.label_6.setObjectName("label_6")
        self.tableView = QtWidgets.QTableView(self.frame_3)
        self.tableView.setGeometry(QtCore.QRect(80, 121, 561, 251))
        self.tableView.setObjectName("tableView")
        
        
        self.Suivant_p2 = QtWidgets.QPushButton(self.frame_3)
        self.Suivant_p2.setGeometry(QtCore.QRect(510, 400, 161, 31))
        self.Suivant_p2.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.Suivant_p2.setObjectName("Suivant_p2")
        self.precedent_p2 = QtWidgets.QPushButton(self.frame_3)
        self.precedent_p2.setGeometry(QtCore.QRect(40, 390, 161, 31))
        self.precedent_p2.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.precedent_p2.setObjectName("precedent_p2")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.frame_4 = QtWidgets.QFrame(self.page_3)
        self.frame_4.setGeometry(QtCore.QRect(10, 0, 741, 541))
      
        self.frame_4.setObjectName("frame_4")
        self.suivant_3 = QtWidgets.QPushButton(self.frame_4)
        self.suivant_3.setGeometry(QtCore.QRect(430, 380, 161, 31))
        self.suivant_3.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.suivant_3.setObjectName("suivant_3")
        self.scrollArea_3 = QtWidgets.QScrollArea(self.frame_4)
        self.scrollArea_3.setGeometry(QtCore.QRect(60, 50, 621, 301))
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 619, 299))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.tableView_3 = QtWidgets.QTableView(self.scrollAreaWidgetContents_3)
        self.tableView_3.setGeometry(QtCore.QRect(0, 0, 621, 291))
        self.tableView_3.setObjectName("tableView_3")
        
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.precedent_p3 = QtWidgets.QPushButton(self.frame_4)
        self.precedent_p3.setGeometry(QtCore.QRect(100, 380, 161, 31))
        self.precedent_p3.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.precedent_p3.setObjectName("precedent_p3")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.frame_5 = QtWidgets.QFrame(self.page_4)
        self.frame_5.setGeometry(QtCore.QRect(20, 0, 711, 501))
        
        self.frame_5.setObjectName("frame_5")
        self.label_9 = QtWidgets.QLabel(self.frame_5)
        self.label_9.setGeometry(QtCore.QRect(280, 30, 131, 18))
        self.label_9.setStyleSheet("color: #1E3A8A;  /* A bold, deep blue (Tailwind\'s blue-900) */\n"
"\n"
"font-size: 16px;\n"
"")
        self.label_9.setObjectName("label_9")
        self.textEdit_6 = QtWidgets.QTextEdit(self.frame_5)
        self.textEdit_6.setGeometry(QtCore.QRect(240, 50, 131, 31))
        self.textEdit_6.setStyleSheet("background-color:white;")
        self.textEdit_6.setObjectName("textEdit_6")
        self.Suivant_4 = QtWidgets.QPushButton(self.frame_5)
        self.Suivant_4.setGeometry(QtCore.QRect(450, 430, 161, 31))
        self.Suivant_4.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.Suivant_4.setObjectName("Suivant_4")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.frame_5)
        self.scrollArea_2.setGeometry(QtCore.QRect(30, 100, 591, 311))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 589, 309))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.tableView_4 = QtWidgets.QTableView(self.scrollAreaWidgetContents_2)
        self.tableView_4.setGeometry(QtCore.QRect(0, 0, 581, 301))
        self.tableView_4.setObjectName("tableView_4")
  
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.precedent_p4 = QtWidgets.QPushButton(self.frame_5)
        self.precedent_p4.setGeometry(QtCore.QRect(40, 430, 161, 31))
        self.precedent_p4.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.precedent_p4.setObjectName("precedent_p4")
        self.stackedWidget.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.frame_6 = QtWidgets.QFrame(self.page_5)
        self.frame_6.setGeometry(QtCore.QRect(0, 0, 711, 531))
        
        self.frame_6.setObjectName("frame_6")
        self.scrollArea = QtWidgets.QScrollArea(self.frame_6)
        self.scrollArea.setGeometry(QtCore.QRect(49, 29, 621, 411))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 619, 409))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.rescelltower = QtWidgets.QLabel(self.scrollArea)
        self.rescelltower.setGeometry(QtCore.QRect(0, 0, 771, 441))
        self.rescelltower.setObjectName("rescelltower")
        self.rescelltower.setStyleSheet("QLabel{\n"
                                        "    color : green;\n"
                                        "font-size : 16px;\n"
                                        "font-weight : bold;\n"
                                        "}")
        self.precedent_p5 = QtWidgets.QPushButton(self.frame_6)
        self.precedent_p5.setGeometry(QtCore.QRect(260, 450, 161, 31))
        self.precedent_p5.setStyleSheet("QPushButton {\n"
"   background-color:#2F4F70; \n"
"   color:rgb(245, 245, 220);            /* White text */\n"
"    font-size: 14px;            /* Font size */\n"
"    font-weight: bold;          /* Bold text */\n"
"    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
"    border-radius: 8px;         /* Rounded corners */\n"
"\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
"    border: 2px solid #4682B4;  /* Darker border on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #4169E1;  /* Royal Blue when pressed */\n"
"    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
"    color: #7F7F7F;              /* Grey text for disabled button */\n"
"    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
"}\n"
"")
        self.precedent_p5.setObjectName("precedent_p5")
        self.stackedWidget.addWidget(self.page_5)
               ###################################################################################################################

        # Page 6
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.frame = QtWidgets.QFrame(self.page_6)
        self.frame.setGeometry(QtCore.QRect(0, 0, 698, 494))
        self.frame.setStyleSheet("background-color: rgb(245, 245, 220);")
        self.frame.setObjectName("frame")

        self.Nbtypes = QtWidgets.QLabel(self.frame)
        self.Nbtypes.setGeometry(QtCore.QRect(30, 20, 281, 40))
        self.Nbtypes.setObjectName("Nbtypes")

        self.TypeEdit = QtWidgets.QTextEdit(self.frame)
        self.TypeEdit.setGeometry(QtCore.QRect(30, 60, 181, 30))
        self.TypeEdit.setObjectName("TypeEdit")
        # Ajouter un bouton à droite de TypeEdit
        self.ajoute2 = QtWidgets.QPushButton(self.frame)
        # Position : X = position X de TypeEdit + largeur de TypeEdit + un petit espace (ex: 10 px)
        x_button = 30 + 181 + 10
        y_button = 60  # même hauteur que TypeEdit
        width_button = 80
        height_button = 30
        self.ajoute2.setGeometry(QtCore.QRect(x_button, y_button, width_button, height_button))
        self.ajoute2.setObjectName("ajoute2")
        self.ajoute2.setText("Ajouter")
        self.tableView_type1 = QtWidgets.QTableView(self.frame)
        self.tableView_type1.setGeometry(QtCore.QRect(30, 100, 325,300))
        self.tableView_type1.setObjectName("tableView_type1")
       
        x_col2 = 30 + 325 + 10

        self.LabelOffre = QtWidgets.QLabel(self.frame)
        self.LabelOffre.setGeometry(QtCore.QRect(x_col2, 20, 281, 40))
        self.LabelOffre.setObjectName("LabelOffre")
        self.LabelOffre.setText("Nombre des clients")
    
        self.OffreEdit = QtWidgets.QTextEdit(self.frame)
        self.OffreEdit.setGeometry(QtCore.QRect(x_col2, 60, 181, 30))
        self.OffreEdit.setObjectName("OffreEdit")
    
        self.btnAjouterOffre = QtWidgets.QPushButton(self.frame)
        x_btn_offre = x_col2 + 181 + 10
        self.btnAjouterOffre.setGeometry(QtCore.QRect(x_btn_offre, 60, 80, 30))
        self.btnAjouterOffre.setObjectName("btnAjouterOffre")
        self.btnAjouterOffre.setText("Ajouter")
        
        self.tableViewOffre = QtWidgets.QTableView(self.frame)
        self.tableViewOffre.setGeometry(QtCore.QRect(x_col2, 100, 325, 300))
        self.tableViewOffre.setObjectName("tableViewOffre")
    
        self.suivant_p6 = QtWidgets.QPushButton(self.frame)
        self.suivant_p6.setGeometry(QtCore.QRect(548, 420, 120, 40))
        self.suivant_p6.setStyleSheet("QPushButton {\n"
            "   background-color:#2F4F70; \n"
            "   color:rgb(245, 245, 220);            /* White text */\n"
            "    font-size: 14px;            /* Font size */\n"
            "    font-weight: bold;          /* Bold text */\n"
            "    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
            "    border-radius: 8px;         /* Rounded corners */\n"
            "\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
            "    border: 2px solid #4682B4;  /* Darker border on hover */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #4169E1;  /* Royal Blue when pressed */\n"
            "    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
            "}\n"
            "\n"
            "QPushButton:disabled {\n"
            "    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
            "    color: #7F7F7F;              /* Grey text for disabled button */\n"
            "    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
            "}\n"
        )
        self.suivant_p6.setObjectName("suivant_p6")

        self.precedent_p6 = QtWidgets.QPushButton(self.frame)
        self.precedent_p6.setGeometry(QtCore.QRect(30, 420, 120, 40))
        self.precedent_p6.setStyleSheet("QPushButton {\n"
            "   background-color:#2F4F70; \n"
            "   color:rgb(245, 245, 220);            /* White text */\n"
            "    font-size: 14px;            /* Font size */\n"
            "    font-weight: bold;          /* Bold text */\n"
            "    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
            "    border-radius: 8px;         /* Rounded corners */\n"
            "\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
            "    border: 2px solid #4682B4;  /* Darker border on hover */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #4169E1;  /* Royal Blue when pressed */\n"
            "    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
            "}\n"
            "\n"
            "QPushButton:disabled {\n"
            "    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
            "    color: #7F7F7F;              /* Grey text for disabled button */\n"
            "    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
            "}\n"
        )
        self.precedent_p6.setObjectName("precedent_p6")
        self.stackedWidget.addWidget(self.page_6)

        # Page 7
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setObjectName("page_7")
        self.frame_3 = QtWidgets.QFrame(self.page_7)
        self.frame_3.setGeometry(QtCore.QRect(0, 0, 698, 494))
        self.frame_3.setStyleSheet("background-color: rgb(245, 245, 220);")
        self.frame_3.setObjectName("frame_3")

        self.NbHydro = QtWidgets.QLabel(self.frame_3)
        self.NbHydro.setGeometry(QtCore.QRect(30, 20, 281, 40))
        self.NbHydro.setObjectName("NbHydro")

        self.HydroEdit = QtWidgets.QTextEdit(self.frame_3)
        self.HydroEdit.setGeometry(QtCore.QRect(30, 60, 181, 30))
        self.HydroEdit.setObjectName("HydroEdit")
        
        self.ajoute3 = QtWidgets.QPushButton(self.frame_3)
        # Position : X = position X de TypeEdit + largeur de TypeEdit + un petit espace (ex: 10 px)
        x_button = 30 + 181 + 10
        y_button = 60  # même hauteur que TypeEdit
        width_button = 80
        height_button = 30
        self.ajoute3.setGeometry(QtCore.QRect(x_button, y_button, width_button, height_button))
        self.ajoute3.setObjectName("ajoute2")
        self.ajoute3.setText("Ajouter")
        self.tableView_type1 = QtWidgets.QTableView(self.frame)
        self.tableView_type1.setGeometry(QtCore.QRect(30, 100, 325,300))
        self.tableView_type1.setObjectName("tableView_type1")
        
        self.hydro1 = QtWidgets.QTableView(self.frame_3)
        self.hydro1.setGeometry(QtCore.QRect(30, 100, 638, 300))
        self.hydro1.setObjectName("hydro1")

       

        self.suivant_p7 = QtWidgets.QPushButton(self.frame_3)
        self.suivant_p7.setGeometry(QtCore.QRect(548, 420, 120, 40))
        self.suivant_p7.setStyleSheet("QPushButton {\n"
            "   background-color:#2F4F70; \n"
            "   color:rgb(245, 245, 220);            /* White text */\n"
            "    font-size: 14px;            /* Font size */\n"
            "    font-weight: bold;          /* Bold text */\n"
            "    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
            "    border-radius: 8px;         /* Rounded corners */\n"
            "\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
            "    border: 2px solid #4682B4;  /* Darker border on hover */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #4169E1;  /* Royal Blue when pressed */\n"
            "    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
            "}\n"
            "\n"
            "QPushButton:disabled {\n"
            "    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
            "    color: #7F7F7F;              /* Grey text for disabled button */\n"
            "    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
            "}\n"
        )
        self.suivant_p7.setObjectName("suivant_p7")

        self.precedent_p5_2 = QtWidgets.QPushButton(self.frame_3)
        self.precedent_p5_2.setGeometry(QtCore.QRect(30, 420, 120, 40))
        self.precedent_p5_2.setStyleSheet("QPushButton {\n"
            "   background-color:#2F4F70; \n"
            "   color:rgb(245, 245, 220);            /* White text */\n"
            "    font-size: 14px;            /* Font size */\n"
            "    font-weight: bold;          /* Bold text */\n"
            "    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
            "    border-radius: 8px;         /* Rounded corners */\n"
            "\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
            "    border: 2px solid #4682B4;  /* Darker border on hover */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #4169E1;  /* Royal Blue when pressed */\n"
            "    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
            "}\n"
            "\n"
            "QPushButton:disabled {\n"
            "    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
            "    color: #7F7F7F;              /* Grey text for disabled button */\n"
            "    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
            "}\n"
        )
        self.precedent_p5_2.setObjectName("precedent_p5_2")
        self.stackedWidget.addWidget(self.page_7)

        # Page 8
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setObjectName("page_8")
        self.frame_2 = QtWidgets.QFrame(self.page_8)
        self.frame_2.setGeometry(QtCore.QRect(0, 0, 698, 494))
        self.frame_2.setStyleSheet("background-color: rgb(245, 245, 220);")
        self.frame_2.setObjectName("frame_2")

        self.periodsEdit = QtWidgets.QLabel(self.frame_2)
        self.periodsEdit.setGeometry(QtCore.QRect(30, 20, 351, 40))
        self.periodsEdit.setObjectName("periodsEdit")

        self.MaxStartEdit = QtWidgets.QTextEdit(self.frame_2)
        self.MaxStartEdit.setGeometry(QtCore.QRect(30, 60, 181, 30))
        self.MaxStartEdit.setObjectName("MaxStartEdit")

        self.nbPeriodes = QtWidgets.QLabel(self.frame_2)
        self.nbPeriodes.setGeometry(QtCore.QRect(30, 110, 281, 40))
        self.nbPeriodes.setObjectName("nbPeriodes")

        self.NbPeriodEdit = QtWidgets.QTextEdit(self.frame_2)
        self.NbPeriodEdit.setGeometry(QtCore.QRect(30, 150, 181, 30))
        self.NbPeriodEdit.setObjectName("NbPeriodEdit")

        self.tableView_period = QtWidgets.QTableView(self.frame_2)
        self.tableView_period.setGeometry(QtCore.QRect(30, 200, 638, 150))
        self.tableView_period.setObjectName("tableView_period")
        
        self.precedent_p8 = QtWidgets.QPushButton(self.frame_2)
        self.precedent_p8.setGeometry(QtCore.QRect(30, 420, 120, 40))
        self.precedent_p8.setStyleSheet("QPushButton {\n"
            "   background-color:#2F4F70; \n"
            "   color:rgb(245, 245, 220);            /* White text */\n"
            "    font-size: 14px;            /* Font size */\n"
            "    font-weight: bold;          /* Bold text */\n"
            "    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
            "    border-radius: 8px;         /* Rounded corners */\n"
            "\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
            "    border: 2px solid #4682B4;  /* Darker border on hover */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #4169E1;  /* Royal Blue when pressed */\n"
            "    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
            "}\n"
            "\n"
            "QPushButton:disabled {\n"
            "    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
            "    color: #7F7F7F;              /* Grey text for disabled button */\n"
            "    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
            "}\n"
        )
        self.precedent_p8.setObjectName("precedent_p8")

        self.suivant_p8 = QtWidgets.QPushButton(self.frame_2)
        self.suivant_p8.setGeometry(QtCore.QRect(548, 420, 120, 40))
        self.suivant_p8.setStyleSheet("QPushButton {\n"
            "   background-color:#2F4F70; \n"
            "   color:rgb(245, 245, 220);            /* White text */\n"
            "    font-size: 14px;            /* Font size */\n"
            "    font-weight: bold;          /* Bold text */\n"
            "    border: 2px solid #5F9EA0;  /* Border with a lighter blue color */\n"
            "    border-radius: 8px;         /* Rounded corners */\n"
            "\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #5F9EA0;  /* Lighter Blue when hovered */\n"
            "    border: 2px solid #4682B4;  /* Darker border on hover */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #4169E1;  /* Royal Blue when pressed */\n"
            "    border: 2px solid #3A75A3;  /* Darker border when pressed */\n"
            "}\n"
            "\n"
            "QPushButton:disabled {\n"
            "    background-color: #A9A9A9;  /* Grey background for disabled button */\n"
            "    color: #7F7F7F;              /* Grey text for disabled button */\n"
            "    border: 2px solid #D3D3D3;   /* Light border for disabled button */\n"
            "}\n"
        )
        self.suivant_p8.setObjectName("suivant_p8")
        self.stackedWidget.addWidget(self.page_8)

        



        self.retranslateUi(Page1)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Page1)
        

    def retranslateUi(self, Page1):

        _translate = QtCore.QCoreApplication.translate
        Page1.setWindowTitle(_translate("Page1", "Form"))
        self.label_3.setText(_translate("Page1", "   Choisis un problème à resoudre "))
        self.Tours.setText(_translate("Page1", "Couverture des tours"))
        self.pushButton_6.setText(_translate("Page1", "Production d’énergie électrique "))
        self.textEdit.setHtml(_translate("Page1", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9.75pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_5.setText(_translate("Page1", "Regions Number"))
        self.textEdit_2.setHtml(_translate("Page1", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9.75pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Ajouter.setText(_translate("Page1", "Ajouter"))
        self.label_6.setText(_translate("Page1", "Tours Number"))
        self.Suivant_p2.setText(_translate("Page1", "Suivant"))
        self.precedent_p2.setText(_translate("Page1", "Precedent"))
        self.suivant_3.setText(_translate("Page1", "Suivant"))
        self.precedent_p3.setText(_translate("Page1", "Precedent"))
        self.label_9.setText(_translate("Page1", "Budget"))
        self.textEdit_6.setHtml(_translate("Page1", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9.75pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Suivant_4.setText(_translate("Page1", "Suivant"))
        self.precedent_p4.setText(_translate("Page1", "Precedent"))
        self.precedent_p5.setText(_translate("Page1", "Precedent"))

        self.Tours.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_2))
        self.btnAjouterOffre.clicked.connect(self.getdata3)
        self.Suivant_p2.clicked.connect(self.insertdataintowerregion)
        self.suivant_3.clicked.connect(self.regionpopulation)
        self.Suivant_4.clicked.connect(self.resoudrecellTower)
        self.precedent_p2.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Page_1))
        self.precedent_p3.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_2))
        self.precedent_p4.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_3))
        self.precedent_p5.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_4))
        self.Ajouter.clicked.connect(self.getdata)
        self.ajoute2.clicked.connect(self.getdata2)
        self.ajoute3.clicked.connect(self.getDataRoute)
        self.suivant_p7.clicked.connect(self.InsertRoutes)
        
        
        self.tableView.clicked.connect(self.toggle_item)
        
             
        self.pushButton_6.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_6))
        self.suivant_p6.clicked.connect(self.FixedData2)
        
        self.Nbtypes.setText(_translate("MainWindow", "Nombre des origines"))
        self.suivant_p6.setText(_translate("MainWindow", "Suivant"))
        self.precedent_p6.setText(_translate("MainWindow", "Precedent"))
        self.nbPeriodes.setText(_translate("MainWindow", "Nombre des periodes"))
        self.periodsEdit.setText(_translate("MainWindow", " Nombre maximum d’unités pouvant démarrer à l’instant 0"))
        self.precedent_p8.setText(_translate("MainWindow", "Precedent"))
        self.suivant_p8.setText(_translate("MainWindow", "Suivant"))
        self.NbHydro.setText(_translate("MainWindow", "Nombre de vos itinéraires de transport"))
        self.suivant_p7.setText(_translate("MainWindow", "Suivant"))
        self.precedent_p5_2.setText(_translate("MainWindow", "Precedent"))
        
        
    def next_index(self):
        self.index += 1
        self.stackedWidget.setCurrentIndex(self.index)

    def previous_index(self):
        self.index -= 1
        self.stackedWidget.setCurrentIndex(self.index)
    def setindex(self,index):
        self.index = index
        self.stackedWidget.setCurrentIndex(self.index)

    def getdata(self):
        if self.textEdit_2.toPlainText()=="" or not(is_int(self.textEdit_2.toPlainText())) or int(self.textEdit_2.toPlainText()) < 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Nombre des regions est faux")
            msg.setInformativeText("Entrez un nombre entier")
            msg.setWindowTitle("Erreur")
            msg.exec_()
            return

        if self.textEdit.toPlainText()=="" or not(is_int(self.textEdit.toPlainText())):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Nombre des tours est faux")
            msg.setInformativeText("Entrez un nombre entier")
            msg.setWindowTitle("Erreur")
            msg.exec_()
            return
        region_number = int(self.textEdit_2.toPlainText())
        tower_number = int(self.textEdit.toPlainText())
        self.listregion = [('Region' + str(i)) for i in range(1,region_number+1)]
        self.listtower = [('Tower' + str(i)) for i in range(1,tower_number+1)]
        print(self.listregion)
        print(self.listtower)
        model = QtGui.QStandardItemModel()
        model1 = QtGui.QStandardItemModel()
        model.setRowCount(tower_number)
        model.setColumnCount(region_number)
        model1.setColumnCount(region_number)
        model1.setRowCount(2)
        model2 = QtGui.QStandardItemModel()
        model2.setRowCount(tower_number)
        model2.setColumnCount(2)
        item = QtGui.QStandardItem("Cost")
        model2.setItem(0, 1, item)
        for i in range(tower_number):
            item = QtGui.QStandardItem(self.listtower[i])
            item.setEditable(False) 
            item.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable| QtCore.Qt.ItemIsEnabled)  # Make the item selectable*
            
            
            model.setItem(i+1, 0, item)
            item = QtGui.QStandardItem(self.listtower[i])
            model2.setItem(i+1, 0, item)

        item = QtGui.QStandardItem("Population")
        model1.setItem(1,0, item)
        for i in range(region_number):
            item = QtGui.QStandardItem(self.listregion[i])
            item.setEditable(False) 
            item.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable| QtCore.Qt.ItemIsEnabled)
              # Make the item selectable
            
            model.setItem(0, i+1, item)
            item = QtGui.QStandardItem(self.listregion[i])
            
            model1.setItem(0, i+1, item)
        self.tableView_3.setModel(model1)
        self.tableView.setModel(model)
        self.tableView_4.setModel(model2)
    def toggle_item(self, index):
        item = self.tableView.model().itemFromIndex(index)
        if not index.isValid() or index.row() == 0 or index.column() == 0:
         return
        # Check the current state of the item (normal or toggled)
        current_state = item.data(QtCore.Qt.UserRole)
        
        if current_state == None:
            # Change the state to 'toggled'
            item.setData('toggled', QtCore.Qt.UserRole)
            item.setBackground(QtGui.QColor(255, 0, 0))  # Change background to red
        else:
            # Reset the state back to 'normal'
            default_background = self.tableView.palette().color(QtGui.QPalette.Base)
            item.setData(None, QtCore.Qt.UserRole)
            item.setBackground(default_background)  #
    def insertdataintowerregion(self):
        self.site_coverage_cost = dict()

        if(self.tableView.model() == None):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Empty input")
            msg.setInformativeText("Please enter data before adding it to the list")
            msg.setWindowTitle("Error")
            msg.exec_()
            return

        model = self.tableView.model()


        n = model.rowCount()
        m = model.columnCount()

        for i in range(1,n):
            self.site_coverage_cost[i-1] = list()
            coverge_set = set()
            for j in range(1,m):
                if (model.item(i,j) == None):
                    continue

                value = model.item(i,j).data(QtCore.Qt.UserRole)
                if(value != None):
                   coverge_set.add(j-1)
                
            self.site_coverage_cost[i-1].append(coverge_set)
        print('s2')
        print(self.site_coverage_cost)
        self.stackedWidget.setCurrentWidget(self.page_3)
    def regionpopulation(self):
        model = self.tableView_3.model()
        self.region_population = {}
        n = model.columnCount()
        #print("n = ",n)
        for i in range(1,n):
            if(not(is_int(model.item(1,i).text())) or int(model.item(1,i).text()) <= 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(1)+","+str(i)+")")
                msg.setInformativeText("Please enter an integer number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            if(int(model.item(1,i).text()) < 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(1)+","+str(i)+")")
                msg.setInformativeText("Please enter a positive integer number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            population = int(model.item(1,i).text())
            self.region_population[i-1] = population
        self.stackedWidget.setCurrentWidget(self.page_4)
    def resoudrecellTower(self):

        if not(is_float(self.textEdit_6.toPlainText())):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("wrong input in allocated budget")
            msg.setInformativeText("Please enter a float number")
            msg.setWindowTitle("Error")
            msg.exec_()
            return

        if(float(self.textEdit_6.toPlainText()) < 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("wrong input in allocated budget")
            msg.setInformativeText("Please enter a positive float number")
            msg.setWindowTitle("Error")
            msg.exec_()
            return

        self.allocated_budget = float((self.textEdit_6.toPlainText()))

        model = self.tableView_4.model()
        m = model.rowCount()
        for i in range(1,m):
            if not(is_float(model.item(i,1).text())):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(i)+",1)")
                msg.setInformativeText("Please enter a float number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            value = float(model.item(i,1).text())
            self.site_coverage_cost[i-1].append(value)
        
            res = cell_tower_problem(self.region_population,self.site_coverage_cost,self.allocated_budget)
            data = ""
            data += "Nombre de  Solution = " + str(len(res)) + "\n"
        try:
            for i in range(len(res)):
                data += "Solution "+str(i+1)+"\n"
                data += "Construction de la tour:\n"
                for j in range(len(res[i]['towers_built'])):
                    data += self.listtower[res[i]['towers_built'][j]] + " "
                data+= "\n"
                data+="Coût total : \n"
                data+= str(res[i]['total_cost']) + "\n"
                data+="consommation budgétaire : " +str(res[i]['budget_consumption'])+"%"+ "\n"
                data+="Population Totale : "+str(res[i]['total_population'])+"\n"
                data+="pourcentage de couverture : "+str(res[i]['coverage_percentage'])+"%"+ "\n"
            self.rescelltower.setText(data)
            self.stackedWidget.setCurrentWidget(self.page_5)
        except Exception as e:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error")
            msg.setInformativeText(e.__str__())
            msg.setWindowTitle("Error")
            msg.exec_()
## Second Problem
    def getdata3(self):
        # Validation de l'entrée
        if self.OffreEdit.toPlainText() == "" or not is_int(self.OffreEdit.toPlainText()) or int(self.OffreEdit.toPlainText()) <= 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Nombre des clients")
            msg.setInformativeText("Entrez un nombre entier strictement positif")
            msg.setWindowTitle("Erreur")
            msg.exec_()
            return

        OriginNumber = int(self.OffreEdit.toPlainText())
        print("Nombre de régions :", OriginNumber)

        # Création du modèle avec 2 colonnes : Origine et Offre
        modelClient = QtGui.QStandardItemModel()
        modelClient.setRowCount(OriginNumber)
        modelClient.setColumnCount(2)

        # Définir les en-têtes de colonnes
        modelClient.setHorizontalHeaderLabels(["Client", "Demande"])

        # Générer la liste des noms des régions (lettres A, B, C, ...)
        self.listClient=[]

        for i in range(OriginNumber):
            # Colonne Origine : nom de la région (non modifiable)
            self.listClient.append("Client"+str(i))
            itemOrigine = QtGui.QStandardItem("Client"+str(i+1))
            itemOrigine.setEditable(False)
            itemOrigine.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable)
            modelClient.setItem(i, 0, itemOrigine)

            # Colonne Offre : cellule vide à remplir par l'utilisateur
            itemOffre = QtGui.QStandardItem("")
            itemOffre.setEditable(True)
            modelClient.setItem(i, 1, itemOffre)

        # Assigner le modèle à la vue (par exemple self.tableView_region)
            self.tableViewOffre.setModel(modelClient)
        ##########################################
    def getdata2(self):
        # Validation de l'entrée
        if self.TypeEdit.toPlainText() == "" or not is_int(self.TypeEdit.toPlainText()) or int(self.TypeEdit.toPlainText()) <= 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Nombre des régions est incorrect")
            msg.setInformativeText("Entrez un nombre entier strictement positif")
            msg.setWindowTitle("Erreur")
            msg.exec_()
            return

        OriginNumber = int(self.TypeEdit.toPlainText())
        print("Nombre de régions :", OriginNumber)

        # Création du modèle avec 2 colonnes : Origine et Offre
        modelRegion = QtGui.QStandardItemModel()
        modelRegion.setRowCount(OriginNumber)
        modelRegion.setColumnCount(2)

        # Définir les en-têtes de colonnes
        modelRegion.setHorizontalHeaderLabels(["Origine", "Offre"])

        # Générer la liste des noms des régions (lettres A, B, C, ...)
        self.listRegion = list(string.ascii_uppercase[:OriginNumber])
        self.originsList=[]
        for i in range(OriginNumber):
            # Colonne Origine : nom de la région (non modifiable)
            self.originsList.append(i)
            itemOrigine = QtGui.QStandardItem(self.listRegion[i])
            itemOrigine.setEditable(False)
            itemOrigine.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable)
            modelRegion.setItem(i, 0, itemOrigine)

            # Colonne Offre : cellule vide à remplir par l'utilisateur
            itemOffre = QtGui.QStandardItem("")
            itemOffre.setEditable(True)
            modelRegion.setItem(i, 1, itemOffre)

        # Assigner le modèle à la vue (par exemple self.tableView_region)
        self.tableView_type1.setModel(modelRegion)
        ##########################################
    def getDataRoute(self):
        if self.HydroEdit.toPlainText()=="" or not(is_int(self.HydroEdit.toPlainText())):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Nombre des tours est faux")
            msg.setInformativeText("Entrez un nombre entier")
            msg.setWindowTitle("Erreur")
            msg.exec_()
            return
        
        
        routes_number = int(self.HydroEdit.toPlainText())
        self.listCols = ["Origine","Destination","Cout","Quantité maximale"]
        columns_number = len(self.listCols)
        #self.listtower = [('Tower' + str(i)) for i in range(1,tower_number+1)]
       
        modelRoutes = QtGui.QStandardItemModel()
        
        modelRoutes.setRowCount(routes_number)
        modelRoutes.setColumnCount(columns_number)
        
  
        for i in range(routes_number):
            item = QtGui.QStandardItem("Route"+str(i+1))
            item.setEditable(False) 
            item.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable| QtCore.Qt.ItemIsEnabled)  # Make the item selectable*
            
            modelRoutes.setItem(i+1, 0, item)
        self.tableView_period.setModel(modelRoutes)
            
            

      
        for i in range(columns_number):
            item = QtGui.QStandardItem(self.listCols[i])
            item.setEditable(False) 
            item.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable| QtCore.Qt.ItemIsEnabled)
              # Make the item selectable
            
            modelRoutes.setItem(0, i+1, item)
            
            
           
        
        self.hydro1.setModel(modelRoutes)
        #self.hydro1.resizeColumnsToContents()
    def InsertRoutes(self):
        
        self.c = dict()
        self.q = dict()

        if self.tableView_period.model() is None:
           msg = QtWidgets.QMessageBox()
           msg.setIcon(QtWidgets.QMessageBox.Warning)
           msg.setText("Empty input")
           msg.setInformativeText("Please enter data before adding it to the list")
           msg.setWindowTitle("Error")
           msg.exec_()
           return

        model = self.tableView_period.model()
        n = model.rowCount()
        m = model.columnCount()
    
        for i in range(1, n):
            try:
                # Récupérer et convertir les valeurs en int
                origin = int(model.item(i, 1).text())
                client = int(model.item(i, 2).text())
                cout = int(model.item(i, 3).text())
                qtite = int(model.item(i, 4).text())
            except (ValueError, AttributeError) as e:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText(f"Erreur de conversion à la ligne {i+1}")
                msg.setInformativeText("Assurez-vous que toutes les valeurs sont des entiers valides.")
                msg.setWindowTitle("Erreur de saisie")
                msg.exec_()
                return

            # Vérifier que origin et client sont dans les listes autorisées
            if origin-1 not in self.originsList:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText(f"Origine invalide à la ligne {i+1}")
                msg.setInformativeText(f"L'origine {origin} n'est pas dans la liste des origines entrés.")
                msg.setWindowTitle("Erreur de saisie")
                msg.exec_()
                return
            print(self.listClient)
            if client-1 not in self.clients:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText(f"Client invalide à la ligne {i+1}")
                msg.setInformativeText(f"La destination {client} n'est pas dans la liste des clients entrés.")
                msg.setWindowTitle("Erreur de saisie")
                msg.exec_()
                return
    
            # Vérifier que cout et qtité sont positifs
            if cout < 0 or qtite < 0:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText(f"Valeurs négatives à la ligne {i+1}")
                msg.setInformativeText("Le coût et la quantité doivent être des nombres positifs.")
                msg.setWindowTitle("Erreur de saisie")
                msg.exec_()
                return
    
            # Insérer dans les dictionnaires (en décalant les indices si besoin)
            self.c[(origin - 1, client - 1)] = cout
            self.q[(origin - 1, client - 1)] = qtite
            

        print("Coûts :", self.c)
        print("Capacités :", self.q)
        solution=transport_optimization_simple(self.originsList, self.clients, self.c, self.q, self.Clients, self.Origins)
        print(solution)
        
    # Construire le texte de la solution
        if solution is None:
                texte_erreur = """
                <h2 style="color: #C0392B; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
                    Problème infaisable ou sans solution optimale
                </h2>
                <p style="font-size:14px; color:#7F8C8D; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
                    Le solveur n'a pas pu trouver une solution optimale.<br>
                    Veuillez vérifier les données saisies, les contraintes du modèle, ou la faisabilité du problème.
                </p>
                """

                msg_box = QtWidgets.QMessageBox()
                msg_box.setWindowTitle("Résultat de l'optimisation")
                msg_box.setTextFormat(QtCore.Qt.RichText)
                msg_box.setText(texte_erreur)
                msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
                msg_box.setMinimumSize(600, 300)

                ok_button = msg_box.button(QtWidgets.QMessageBox.Ok)
                ok_button.setStyleSheet("font-size: 14px; padding: 8px 20px;")

                msg_box.exec_()
                return

        # Sinon, on a une solution optimale
        texte = """
        <h2 style="color: #2E86C1; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
            Solution optimale
        </h2>
        <p style="font-size:14px; color:#34495E; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
            Voici le détail des transports optimaux calculés par le modèle :
        </p>
        <table style="border-collapse: collapse; width: 100%; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
            <thead>
                <tr style="background-color: #2980B9; color: white;">
                    <th style="padding: 8px; border: 1px solid #ddd;">Origine</th>
                    <th style="padding: 8px; border: 1px solid #ddd;">Client</th>
                    <th style="padding: 8px; border: 1px solid #ddd;">Quantité transportée</th>
                </tr>
            </thead>
            <tbody>
        """

        for (i, j), val in solution.items():
            if val > 0:
                origine_nom = f"Origine {i+1}"  # ou self.originNames[i]
                client_nom = f"Client {j+1}"    # ou self.clientNames[j]
                texte += f"""
                <tr>
                    <td style="padding: 8px; border: 1px solid #ddd;">{origine_nom}</td>
                    <td style="padding: 8px; border: 1px solid #ddd;">{client_nom}</td>
                    <td style="padding: 8px; border: 1px solid #ddd; text-align: right;">{val:.2f}</td>
                </tr>
                """

        texte += """
            </tbody>
        </table>
        <p style="font-size:12px; color:#7F8C8D; margin-top: 15px;">
            <i>Note : Les quantités sont exprimées en unités.</i>
        </p>
        """

        msg_box = QtWidgets.QMessageBox()
        msg_box.setWindowTitle("Résultat de l'optimisation")
        msg_box.setTextFormat(QtCore.Qt.RichText)
        msg_box.setText(texte)
        msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg_box.setMinimumSize(700, 450)

        ok_button = msg_box.button(QtWidgets.QMessageBox.Ok)
        ok_button.setStyleSheet("font-size: 14px; padding: 8px 20px;")

        msg_box.exec_()



        
    def FixedData2(self):
        model = self.tableViewOffre.model()
        print(model)
        self.Clients= dict()
        self.clients=[]
        n = model.rowCount()
        #print("n = ",n)
        for i in range(0,n):
            if(not(is_int(model.item(i,1).text())) or int(model.item(i,1).text()) <= 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(1)+","+str(i)+")")
                msg.setInformativeText("Please enter an integer number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            if(int(model.item(i,1).text()) < 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(1)+","+str(i)+")")
                msg.setInformativeText("Please enter a positive integer number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            ClientOffre = int(model.item(i,1).text())
            self.clients.append(i)
            self.Clients[i] = ClientOffre
        print(self.Clients)
    
        model = self.tableView_type1.model()
        print(model)
        self.Origins = dict()
        
        n = model.rowCount()
        #print("n = ",n)
        for i in range(0,n):
            if(not(is_int(model.item(i,1).text())) or int(model.item(i,1).text()) <= 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(1)+","+str(i)+")")
                msg.setInformativeText("Please enter an integer number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            if(int(model.item(i,1).text()) < 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(1)+","+str(i)+")")
                msg.setInformativeText("Please enter a positive integer number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            OriginOffre = int(model.item(i,1).text())
            self.Origins[i] = OriginOffre
        print(self.Origins)
        self.stackedWidget.setCurrentWidget(self.page_7)
        #self.stackedWidget.setCurrentWidget(self.page_4)
    def resoudrecellTower(self):

        if not(is_float(self.textEdit_6.toPlainText())):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("wrong input in allocated budget")
            msg.setInformativeText("Please enter a float number")
            msg.setWindowTitle("Error")
            msg.exec_()
            return

        if(float(self.textEdit_6.toPlainText()) < 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("wrong input in allocated budget")
            msg.setInformativeText("Please enter a positive float number")
            msg.setWindowTitle("Error")
            msg.exec_()
            return

        self.allocated_budget = float((self.textEdit_6.toPlainText()))

        model = self.tableView_4.model()
        m = model.rowCount()
        for i in range(1,m):
            if not(is_float(model.item(i,1).text())):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("wrong input in cell ("+str(i)+",1)")
                msg.setInformativeText("Please enter a float number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            value = float(model.item(i,1).text())
            self.site_coverage_cost[i-1].append(value)
        
            res = cell_tower_problem(self.region_population,self.site_coverage_cost,self.allocated_budget)
            data = ""
            data += "Nombre de  Solution = " + str(len(res)) + "\n"
        try:
            for i in range(len(res)):
                data += "Solution "+str(i+1)+"\n"
                data += "Construction de la tour:\n"
                for j in range(len(res[i]['towers_built'])):
                    data += self.listtower[res[i]['towers_built'][j]] + " "
                data+= "\n"
                data+="Coût total : \n"
                data+= str(res[i]['total_cost']) + "\n"
                data+="consommation budgétaire : " +str(res[i]['budget_consumption'])+"%"+ "\n"
                data+="Population Totale : "+str(res[i]['total_population'])+"\n"
                data+="pourcentage de couverture : "+str(res[i]['coverage_percentage'])+"%"+ "\n"
            self.rescelltower.setText(data)
            self.stackedWidget.setCurrentWidget(self.page_5)
        except Exception as e:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error")
            msg.setInformativeText(e.__str__())
            msg.setWindowTitle("Error")
            msg.exec_()
## Second Problem
      
 




        
if __name__ == "__main__":
    import sys
    
    app = QtWidgets.QApplication(sys.argv)
    
    
    MainWindow = QtWidgets.QWidget()
    
    ui = Ui_Page1()
    
    ui.setupUi(MainWindow)
    for table in MainWindow.findChildren(QtWidgets.QTableView):
        table.verticalHeader().setVisible(False)
        #ptable.horizontalHeader().setVisible(False)
    
    MainWindow.show()
    sys.exit(app.exec_())

